document.addEventListener('DOMContentLoaded', () => {
    gsap.registerPlugin(ScrollTrigger);

    const overlay = document.getElementById('overlay');
    const header = document.getElementById('main-header');
    const jumbleContainer = document.getElementById('jumble-container');
    const finalText = "TERRYZHANG--PHOTO--PORTFOLIO";
    
    // 确保在 overlay 动画结束后，header 仍然显示
    header.style.opacity = '1';
    header.style.transform = 'translateY(0)';
    document.body.style.overflow = 'hidden'; // 禁止滚动

    // 字符跳动动画
    function jumbleAnimation(text, container, duration) {
        const characters = "!@#$%^&*()_+{}:<>?[];,./";
        let current = text.split('');
        for (let i = 0; i < text.length; i++) {
            const span = document.createElement('span');
            span.classList.add('jumble');
            span.style.animationDelay = `${i * duration / text.length}s`;
            container.appendChild(span);
            (function animateCharacter(index) {
                const interval = setInterval(() => {
                    if (index === text.length) {
                        clearInterval(interval);
                        span.textContent = text[index];
                        return;
                    }
                    span.textContent = characters[Math.floor(Math.random() * characters.length)];
                }, 50);
                setTimeout(() => {
                    clearInterval(interval);
                    span.textContent = text[index];
                }, duration * 1000);
            })(i);
        }
    }

    jumbleAnimation(finalText, jumbleContainer, 2);

    setTimeout(() => {
        overlay.style.animation = 'fadeOut 2s ease forwards';
        document.body.style.overflow = 'auto'; // 允许滚动
    }, 3100); // 3秒后开始淡出动画

    gsap.utils.toArray('section').forEach(section => {
        gsap.to(section, {
            scrollTrigger: {
                trigger: section,
